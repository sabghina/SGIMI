@model BT.Stage.SGIMI.UserInterface.ViewModel.CreateInterventionViewModel
@{
    ViewBag.Title = "ModifierIntervention";
}
<style>
    h2, p {
        color: white;
    }
    .form-group {
        color: white;
    }
</style>
@{
    List<SelectListItem> listN = new List<SelectListItem>();
    listN.Add(new SelectListItem
    {
        Text = "Intervention sous contrat de maintenance",
        Value = "Intervention sous contrat de maintenance",
        Selected = true
    });
    listN.Add(new SelectListItem
    {
        Text = "Intervention sous garantie",
        Value = "Intervention sous garantie",

    });
    listN.Add(new SelectListItem
    {
        Text = "Intervention hors contrats de maintenance",
        Value = "Intervention hors contrats de maintenance",

    });
}
@{
    List<SelectListItem> listType = new List<SelectListItem>();
    listType.Add(new SelectListItem
    {
        Text = "Technicien BT",
        Value = "Technicien BT",
        Selected = true
    });
    listType.Add(new SelectListItem
    {
        Text = "Societé Tierce",
        Value = "Societé Tierce",

    });

}
@{
    List<SelectListItem> listEtat = new List<SelectListItem>();
    @* listEtat.Add(new SelectListItem

        {
            Text = "Choisir Etat",
            Value = "Choisir Etat",
            Selected = true
        }); *@
    listEtat.Add(new SelectListItem
    {
        Text = "En cours",
        Value = "En cours",
        Selected = true
    });
    listEtat.Add(new SelectListItem
    {
        Text = "Terminé",
        Value = "Terminé",

    });
    listEtat.Add(new SelectListItem
    {
        Text = "Annuler",
        Value = "Annuler",
        Selected = true
    });
}

@using (Html.BeginForm("Edit", "Intervention", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Modifier une intervention</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Type, listType, new { @class = "form-control", required = "required" })
                @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Nature, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Nature, listN, new { @class = "form-control", required = "required" })
                @Html.ValidationMessageFor(model => model.Nature, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Etat, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Etat, listEtat, new { @class = "form-control", required = "required" })
                @Html.ValidationMessageFor(model => model.Etat, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProblemeConstate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ProblemeConstate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ProblemeConstate, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.TraveauxEffectues, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TraveauxEffectues, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TraveauxEffectues, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Sauvgarder" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Retour", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
