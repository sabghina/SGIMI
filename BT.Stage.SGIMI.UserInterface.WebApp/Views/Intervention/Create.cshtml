@model BT.Stage.SGIMI.UserInterface.ViewModel.CreateInterventionViewModel
@{
    ViewBag.Title = "Ajouter une intervention";
}<style>
    h2, p {
        color: white;
    }

    .form-group {
        color: white;
    }
</style>
@{
    List<SelectListItem> listN = new List<SelectListItem>();
    listN.Add(new SelectListItem
    {
        Text = "Intervention sous contrat de maintenance",
        Value = "Intervention sous contrat de maintenance",
        Selected = true
    });
    listN.Add(new SelectListItem
    {
        Text = "Intervention sous garantie",
        Value = "Intervention sous garantie",

    });
    listN.Add(new SelectListItem
    {
        Text = "Intervention hors contrats de maintenance",
        Value = "Intervention hors contrats de maintenance",

    });
}
@{
    List<SelectListItem> listType = new List<SelectListItem>();
    listType.Add(new SelectListItem
    {
        Text = "Technicien BT",
        Value = "Technicien BT",
        Selected = true
    });
    listType.Add(new SelectListItem
    {
        Text = "Societé Tierce",
        Value = "Societé Tierce",

    });

}
<h2>Intervention sur reclamation </h2>

@using (Html.BeginForm("Create", "Intervention", FormMethod.Post))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    
    <div class="form-group">
        @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.Type, listType, new { @class = "form-control", required = "required" })
            @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Nature, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.Nature, listN, new { @class = "form-control", required = "required" })
            @Html.ValidationMessageFor(model => model.Nature, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.HiddenFor(model => model.Reclamation, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.HiddenFor(model => model.Reclamation, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Reclamation, "", new { @class = "text-danger" })
        </div>
    </div>



    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Ajouter" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Retour", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
